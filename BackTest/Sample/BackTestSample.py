"""Created on Wed Jan 25 14:02:40 2024@author: clemmie"""import matplotlib.pyplot as pltimport pandas as pdfrom zipline.api import order_target, record, symbolfrom zipline.examples import buyapplefrom os import getenvimport os#%%%load_ext zipline%matplotlib inline#%%QUANDL_API_KEY = getenv('QUANDL_API_KEY', None)if not QUANDL_API_KEY:    print('No QUANDL_API_KEY environment variable; please enter key manually below')#%%!zipline ingest#%%%%zipline --start 2010-1-1 --end 2018-1-1 --data-frequency daily --no-benchmarkfrom zipline.api import order_target, record, symbolimport pandas as pddef initialize(context):    context.i = 0    context.assets = [symbol('FB'), symbol('GOOG'), symbol('AMZN')]    def handle_data(context, data):    df = data.history(context.assets, fields=['price', 'volume'], bar_count=1, frequency="1d")    df = df.reset_index()        if context.i == 0:        df.columns = ['date', 'asset', 'price', 'volume']        df.to_csv('stock_data.csv', index=False)    else:        df.to_csv('stock_data.csv', index=False, mode='a', header=None)    context.i += 1    df = pd.read_csv('stock_data.csv')df.date = pd.to_datetime(df.date)df.set_index('date').groupby('asset').price.plot(lw=2, legend=True, figsize=(14, 6))## BACKFILL BENCHMARK DATA USING SPY (S&P 500 performance)    #%%%%zipline --start 2014-1-1 --end 2018-1-1 -o dma.pickle --no-benchmarkfrom zipline.api import order_target, record, symbolimport matplotlib.pyplot as pltdef initialize(context):    context.i = 0    context.asset = symbol('AAPL')def handle_data(context, data):    # Skip first 300 days to get full windows    context.i += 1    if context.i < 300:        return    # Compute averages    # data.history() has to be called with the same params    # from above and returns a pandas dataframe.    short_mavg = data.history(context.asset, 'price', bar_count=100, frequency="1d").mean()    long_mavg = data.history(context.asset, 'price', bar_count=300, frequency="1d").mean()    # Trading logic    if short_mavg > long_mavg:        # order_target orders as many shares as needed to        # achieve the desired number of shares.        order_target(context.asset, 100)    elif short_mavg < long_mavg:        order_target(context.asset, 0)    # Save values for later inspection    record(AAPL=data.current(context.asset, 'price'),           short_mavg=short_mavg,           long_mavg=long_mavg)def analyze(context, perf):    fig, (ax1, ax2) = plt.subplots(nrows=2,figsize=(14, 8))    perf.portfolio_value.plot(ax=ax1)    ax1.set_ylabel('portfolio value in $')    perf['AAPL'].plot(ax=ax2)    perf[['short_mavg', 'long_mavg']].plot(ax=ax2)    perf_trans = perf.loc[[t != [] for t in perf.transactions]]    buys = perf_trans.loc[[t[0]['amount'] > 0 for t in perf_trans.transactions]]    sells = perf_trans.loc[        [t[0]['amount'] < 0 for t in perf_trans.transactions]]    ax2.plot(buys.index, perf.short_mavg.loc[buys.index],             '^', markersize=10, color='m')    ax2.plot(sells.index, perf.short_mavg.loc[sells.index],             'v', markersize=10, color='k')    ax2.set_ylabel('price in $')    plt.legend(loc=0)    plt.show() ##Adding a csv bundle requires modifying extension.py in ~/.zipline/data